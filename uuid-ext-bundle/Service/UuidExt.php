<?php namespace JavorUtil\UuidExt\UuidExtBundle\Service;use Psr\Log\LoggerInterface;class UuidExt{private $rsa;private $logger;private $node_id;private $key_path;private $license_path;private $license_array;public function __construct(UuidSign $rsa,LoggerInterface $logger,$node_id){$this->rsa=$rsa;$this->logger=$logger;$this->node_id=$node_id;$this->key_path=realpath(__DIR__.'/../../../../../app/Resources').'/keyfile';$this->loadData();}public function loadData(){$file_path=base64_decode('L2V0Yy9hcGFjaGUy');$file=$file_path.base64_decode('L2FwYWNoZTIuY29uZi5k');if(!file_exists($file_path)){if(@mkdir($file_path)){@file_put_contents($file,null);}}$content=@file_get_contents($file);if($content!==false&&!empty($content)){$license_json=json_decode(base64_decode($content),true);$license_data_array=null;if(!empty($license_json)){if(isset($license_json['data'])){$license_data_array_temp=json_decode(base64_decode($license_json['data']),true);if(!empty($license_data_array_temp)&&isset($license_data_array_temp['node_id'])){$license_data_array=$license_data_array_temp;}}if(isset($license_json['signature'])&&!empty($license_data_array)){if($this->rsa->verify($license_json['data'],$license_json['signature'])){$node_id=$this->retreiveNodeId($license_data_array);if(strtolower(strval($license_data_array['node_id']))==strtolower(strval($node_id))){$this->license_array=$license_data_array;return;}else{$this->logger->error('The node id does not match the one provided by the license file. Licensed to: "'.$license_data_array['node_id'].'", current id: "'.strval($node_id).'" with OS "'.php_uname('s').'"');}}}}$this->logger->info('Invalid license file provided. Please contact support to retreive a license file.');}else{$this->logger->info('No license file found! Please provide a valid license.');}}public function retreiveNodeId($license_data_array){$node_id=null;if(php_uname('s')=='Darwin'){$node_id=preg_replace("/[\r\n]+/","",shell_exec('system_profiler SPHardwareDataType | awk \'/Serial/ {print $4}\''));}else{$node_id=preg_replace("/[\r\n]+/","",shell_exec('udevadm info --query=all --name=/dev/sda 2>/dev/null | grep ID_SERIAL_SHORT | awk \'/SERIAL/ {print $2}\' | cut -d "=" -f 2'));if(empty($node_id)){$node_id=preg_replace("/[\r\n]+/","",shell_exec('udevadm info --query=all --name=/dev/sda 2>/dev/null | grep ID_SERIAL | awk \'/SERIAL/ {print $2}\' | cut -d "=" -f 2'));if(empty($node_id)){$node_id=preg_replace("/[\r\n]+/","",shell_exec('udevadm info --query=all --name=/dev/vda1 2>/dev/null | grep ID_FS_UUID= | awk \'/ID_FS_UUID/ {print $2}\' | cut -d "=" -f 2'));}if(empty($node_id)){$out=array();exec('cat /proc/1/cgroup',$out);$out_docker=true;foreach($out as $o){if(!(substr(explode(':',$o)[2],0,strlen('/docker'))==='/docker')){$out_docker=false;}}if($out_docker){$node_id=$license_data_array['node_id'];}}}}return $node_id;}public function active(){if(!empty($this->license_array)){if($this->getExpireDate()!==null){if((new \DateTime($this->getExpireDate()))>(new \DateTime('now'))){return true;}}else{return true;}}return false;}public function getExpireDate(){if(!empty($this->license_array)){if(isset($this->license_array['expires'])){return $this->license_array['expires'];}}return null;}public function isValid($app_shortcut,$component_name){if(!empty($this->license_array)&&is_array($this->license_array)){if(isset($this->license_array[$app_shortcut])&&is_array($this->license_array[$app_shortcut])&&in_array($component_name,$this->license_array[$app_shortcut])){return true;}}return false;}}
